# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '17.0'
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
# flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

# linkage = ENV['USE_FRAMEWORKS'] # its probably gonna fail to build if you set this to a value.
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end

target 'WhopReactNativeKit' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    :hermes_enabled => true,
    :fabric_enabled => true,
    :new_arch_enabled => true,
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    # :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    # Removing this since it crashes and we dont use xcode 12.x.x anymore.
    # __apply_Xcode_12_5_M1_post_install_workaround(installer)

    # Workaround for iOS non-public selectors issue 
    # https://github.com/facebook/react-native/issues/31507
    find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                                "_modifierFlags",
                                "_modifierEventFlags")
    find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                            "_modifiedInput",
                            "_modifiedEventInput")
    find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                            "_isKeyDown",
                            "_isKeyEventDown")
    find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerClient.h",
                            "handleNotification",
                            "handlePackageNotification")

    find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerConnection.mm",
                            "handleNotification",
                            "handlePackageNotification")

    PLIST_BUDDY_PATH = '/usr/libexec/PlistBuddy'

    targets_to_skip_verification = [
      'Yoga',
      'YogaKit',
      "NitroModules",
      "ReactNativeVideo",
      "react_native_video",
      "react-native-video",
      "RNFastImage"
    ]
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        if target.name == "hermes-engine"
          installer.pods_project.files.each do |fileref|
            if fileref.path.end_with? "hermes.xcframework"
              hermes_plist_file = "#{fileref.real_path}/Info.plist"
              # Patch Hermes to remove the debug symbols entry from the Info.plist (as it's not shipped with it)
              # This might be removed once Hermes starts to ship with Debug symbols or we remove our
              # direct dependency from the Main iOS target on "hermes.xcframework"
              puts "Removing DebugSymbolsPath from info.plist for #{target.name}"
              Open3.capture3(PLIST_BUDDY_PATH, '-c', 'Delete :AvailableLibraries:0:DebugSymbolsPath', hermes_plist_file)
              Open3.capture3(PLIST_BUDDY_PATH, '-c', 'Delete :AvailableLibraries:1:DebugSymbolsPath', hermes_plist_file)
              Open3.capture3(PLIST_BUDDY_PATH, '-c', 'Delete :AvailableLibraries:2:DebugSymbolsPath', hermes_plist_file)
            end
          end
        end

        if targets_to_skip_verification.include?(target.name)
          target.build_configurations.each do |config|
            puts "Updating OTHER_SWIFT_FLAGS for target #{target.name} (#{config.name}) to include -no-verify-emitted-module-interface"
  
            # It's very important that the "$(inherited)" part is added, otherwise this will
            # overwrite all other flags and cause a whole separate set of issues
            config.build_settings['OTHER_SWIFT_FLAGS'] = '$(inherited) -no-verify-emitted-module-interface'
          end
        end
      end
    end

    
    installer.pods_project.targets.each do |t|
      puts "t.name: #{t.name}"

      next unless targets_to_skip_verification.include?(t.name)
  
      t.build_configurations.each do |c|

        puts "DISABLE x86_64; DISABLE BUILD_LIBRARY_FOR_DISTRIBUTION; for #{t.name} and config #{c.name}"
        # We’re not shipping NitroModules as a stand-alone binary, so we don’t
        # need .swiftinterface verification or the x86_64 slice.
        c.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'
        c.build_settings['EXCLUDED_ARCHS'] = 'x86_64'
      end
    end
  end
end
